// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="pro_int_trans,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.321400,HLS_SYN_LAT=32,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=51,HLS_SYN_FF=4405,HLS_SYN_LUT=7045,HLS_VERSION=2018_3}" *)

module pro_int_trans (
        ap_clk,
        ap_rst_n,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP
);

parameter    ap_ST_fsm_state1 = 33'd1;
parameter    ap_ST_fsm_state2 = 33'd2;
parameter    ap_ST_fsm_state3 = 33'd4;
parameter    ap_ST_fsm_state4 = 33'd8;
parameter    ap_ST_fsm_state5 = 33'd16;
parameter    ap_ST_fsm_state6 = 33'd32;
parameter    ap_ST_fsm_state7 = 33'd64;
parameter    ap_ST_fsm_state8 = 33'd128;
parameter    ap_ST_fsm_state9 = 33'd256;
parameter    ap_ST_fsm_state10 = 33'd512;
parameter    ap_ST_fsm_state11 = 33'd1024;
parameter    ap_ST_fsm_state12 = 33'd2048;
parameter    ap_ST_fsm_state13 = 33'd4096;
parameter    ap_ST_fsm_state14 = 33'd8192;
parameter    ap_ST_fsm_state15 = 33'd16384;
parameter    ap_ST_fsm_state16 = 33'd32768;
parameter    ap_ST_fsm_state17 = 33'd65536;
parameter    ap_ST_fsm_state18 = 33'd131072;
parameter    ap_ST_fsm_state19 = 33'd262144;
parameter    ap_ST_fsm_state20 = 33'd524288;
parameter    ap_ST_fsm_state21 = 33'd1048576;
parameter    ap_ST_fsm_state22 = 33'd2097152;
parameter    ap_ST_fsm_state23 = 33'd4194304;
parameter    ap_ST_fsm_state24 = 33'd8388608;
parameter    ap_ST_fsm_state25 = 33'd16777216;
parameter    ap_ST_fsm_state26 = 33'd33554432;
parameter    ap_ST_fsm_state27 = 33'd67108864;
parameter    ap_ST_fsm_state28 = 33'd134217728;
parameter    ap_ST_fsm_state29 = 33'd268435456;
parameter    ap_ST_fsm_state30 = 33'd536870912;
parameter    ap_ST_fsm_state31 = 33'd1073741824;
parameter    ap_ST_fsm_state32 = 33'd2147483648;
parameter    ap_ST_fsm_state33 = 33'd4294967296;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;

 reg    ap_rst_n_inv;
wire   [31:0] c_int;
reg    c_int_ap_vld;
wire   [31:0] x_int;
wire   [31:0] y1_int;
wire   [31:0] y2_int;
wire   [31:0] k_int;
wire   [31:0] l_int;
wire   [31:0] m_int;
wire   [31:0] p_int;
wire   [31:0] q_int;
wire   [31:0] r_int;
wire   [31:0] s_int;
wire   [31:0] u_int;
wire   [31:0] v_int;
wire   [31:0] w_int;
wire   [31:0] grp_fu_143_p2;
reg   [31:0] reg_182;
(* fsm_encoding = "none" *) reg   [32:0] ap_CS_fsm;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state32;
wire   [31:0] grp_fu_147_p2;
reg   [31:0] reg_188;
reg   [31:0] reg_194;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state10;
wire   [31:0] grp_fu_135_p2;
reg   [31:0] reg_200;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state22;
wire   [31:0] grp_fu_139_p2;
reg   [31:0] reg_206;
reg   [31:0] reg_212;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state18;
reg   [31:0] w_int_read_reg_281;
wire    ap_CS_fsm_state1;
reg   [31:0] v_int_read_reg_286;
reg   [31:0] u_int_read_reg_291;
reg   [31:0] s_int_read_reg_296;
reg   [31:0] r_int_read_reg_301;
reg   [31:0] q_int_read_reg_306;
reg   [31:0] p_int_read_reg_311;
reg   [31:0] m_int_read_reg_316;
reg   [31:0] l_int_read_reg_321;
reg   [31:0] k_int_read_reg_326;
reg   [31:0] y2_int_read_reg_331;
reg   [31:0] y1_int_read_reg_336;
reg   [31:0] x_int_read_reg_341;
wire   [31:0] x_float_fu_218_p1;
wire    ap_CS_fsm_state2;
wire   [31:0] y1_float_fu_226_p1;
reg   [31:0] y1_float_reg_355;
wire   [31:0] k_float_fu_231_p1;
wire   [31:0] l_float_fu_235_p1;
wire   [31:0] grp_fu_151_p2;
reg   [31:0] tmp_reg_397;
wire   [31:0] grp_fu_155_p2;
reg   [31:0] tmp_1_reg_402;
wire   [31:0] grp_fu_159_p2;
reg   [31:0] tmp_2_reg_407;
wire   [31:0] grp_fu_163_p2;
reg   [31:0] tmp_7_reg_412;
wire   [31:0] grp_fu_167_p2;
reg   [31:0] tmp_8_reg_417;
wire   [31:0] y2_float_fu_259_p1;
reg   [31:0] y2_float_reg_422;
wire    ap_CS_fsm_state6;
wire   [31:0] m_float_fu_264_p1;
wire   [31:0] w_float_fu_268_p1;
reg   [31:0] pxy_float_reg_438;
reg   [31:0] qxy_float_reg_443;
wire   [63:0] tmp_11_fu_174_p1;
reg   [63:0] tmp_11_reg_448;
wire    ap_CS_fsm_state13;
wire   [31:0] s_float_fu_272_p1;
wire    ap_CS_fsm_state15;
wire   [63:0] grp_fu_177_p2;
reg   [63:0] tmp_12_reg_458;
wire    ap_CS_fsm_state28;
wire   [31:0] exp_float_fu_171_p1;
reg   [31:0] exp_float_reg_463;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state33;
reg   [31:0] grp_fu_135_p0;
reg   [31:0] grp_fu_135_p1;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state19;
reg   [31:0] grp_fu_139_p0;
reg   [31:0] grp_fu_139_p1;
reg   [31:0] grp_fu_143_p0;
reg   [31:0] grp_fu_143_p1;
wire    ap_CS_fsm_state30;
reg   [31:0] grp_fu_147_p0;
reg   [31:0] grp_fu_147_p1;
wire   [31:0] grp_fu_151_p0;
wire   [31:0] grp_fu_155_p0;
wire   [31:0] grp_fu_159_p0;
wire   [31:0] grp_fu_163_p0;
wire   [31:0] grp_fu_167_p0;
wire   [31:0] grp_fu_167_p1;
reg   [32:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 33'd1;
end

pro_int_trans_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
pro_int_trans_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .c_int(c_int),
    .c_int_ap_vld(c_int_ap_vld),
    .x_int(x_int),
    .y1_int(y1_int),
    .y2_int(y2_int),
    .k_int(k_int),
    .l_int(l_int),
    .m_int(m_int),
    .p_int(p_int),
    .q_int(q_int),
    .r_int(r_int),
    .s_int(s_int),
    .u_int(u_int),
    .v_int(v_int),
    .w_int(w_int)
);

pro_int_trans_fadbkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
pro_int_trans_fadbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_135_p0),
    .din1(grp_fu_135_p1),
    .ce(1'b1),
    .dout(grp_fu_135_p2)
);

pro_int_trans_fadbkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
pro_int_trans_fadbkb_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_139_p0),
    .din1(grp_fu_139_p1),
    .ce(1'b1),
    .dout(grp_fu_139_p2)
);

pro_int_trans_fmucud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
pro_int_trans_fmucud_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_143_p0),
    .din1(grp_fu_143_p1),
    .ce(1'b1),
    .dout(grp_fu_143_p2)
);

pro_int_trans_fmucud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
pro_int_trans_fmucud_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_147_p0),
    .din1(grp_fu_147_p1),
    .ce(1'b1),
    .dout(grp_fu_147_p2)
);

pro_int_trans_fmucud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
pro_int_trans_fmucud_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_151_p0),
    .din1(x_float_fu_218_p1),
    .ce(1'b1),
    .dout(grp_fu_151_p2)
);

pro_int_trans_fmucud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
pro_int_trans_fmucud_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_155_p0),
    .din1(x_float_fu_218_p1),
    .ce(1'b1),
    .dout(grp_fu_155_p2)
);

pro_int_trans_fmucud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
pro_int_trans_fmucud_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_159_p0),
    .din1(x_float_fu_218_p1),
    .ce(1'b1),
    .dout(grp_fu_159_p2)
);

pro_int_trans_fmucud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
pro_int_trans_fmucud_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_163_p0),
    .din1(x_float_fu_218_p1),
    .ce(1'b1),
    .dout(grp_fu_163_p2)
);

pro_int_trans_fmucud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
pro_int_trans_fmucud_U9(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_167_p0),
    .din1(grp_fu_167_p1),
    .ce(1'b1),
    .dout(grp_fu_167_p2)
);

pro_int_trans_fptdEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
pro_int_trans_fptdEe_U10(
    .din0(tmp_12_reg_458),
    .dout(exp_float_fu_171_p1)
);

pro_int_trans_fpeeOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
pro_int_trans_fpeeOg_U11(
    .din0(reg_206),
    .dout(tmp_11_fu_174_p1)
);

pro_int_trans_dexfYi #(
    .ID( 1 ),
    .NUM_STAGE( 15 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
pro_int_trans_dexfYi_U12(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(64'd0),
    .din1(tmp_11_reg_448),
    .ce(1'b1),
    .dout(grp_fu_177_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        exp_float_reg_463 <= exp_float_fu_171_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        k_int_read_reg_326 <= k_int;
        l_int_read_reg_321 <= l_int;
        m_int_read_reg_316 <= m_int;
        p_int_read_reg_311 <= p_int;
        q_int_read_reg_306 <= q_int;
        r_int_read_reg_301 <= r_int;
        s_int_read_reg_296 <= s_int;
        u_int_read_reg_291 <= u_int;
        v_int_read_reg_286 <= v_int;
        w_int_read_reg_281 <= w_int;
        x_int_read_reg_341 <= x_int;
        y1_int_read_reg_336 <= y1_int;
        y2_int_read_reg_331 <= y2_int;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        pxy_float_reg_438 <= grp_fu_143_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        qxy_float_reg_443 <= grp_fu_143_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state8))) begin
        reg_182 <= grp_fu_143_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state8))) begin
        reg_188 <= grp_fu_147_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7))) begin
        reg_194 <= grp_fu_147_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state8))) begin
        reg_200 <= grp_fu_135_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state8))) begin
        reg_206 <= grp_fu_139_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state14))) begin
        reg_212 <= grp_fu_135_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        tmp_11_reg_448 <= tmp_11_fu_174_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        tmp_12_reg_458 <= grp_fu_177_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_1_reg_402 <= grp_fu_155_p2;
        tmp_2_reg_407 <= grp_fu_159_p2;
        tmp_7_reg_412 <= grp_fu_163_p2;
        tmp_8_reg_417 <= grp_fu_167_p2;
        tmp_reg_397 <= grp_fu_151_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        y1_float_reg_355 <= y1_float_fu_226_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        y2_float_reg_422 <= y2_float_fu_259_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        c_int_ap_vld = 1'b1;
    end else begin
        c_int_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_135_p0 = reg_212;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_135_p0 = qxy_float_reg_443;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state13))) begin
        grp_fu_135_p0 = reg_200;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_135_p0 = reg_182;
    end else begin
        grp_fu_135_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_135_p1 = reg_212;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_135_p1 = s_float_fu_272_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_135_p1 = pxy_float_reg_438;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_135_p1 = reg_194;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_135_p1 = reg_182;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_135_p1 = reg_188;
    end else begin
        grp_fu_135_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_139_p0 = reg_206;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_139_p0 = tmp_7_reg_412;
    end else begin
        grp_fu_139_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_139_p1 = reg_188;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_139_p1 = tmp_8_reg_417;
    end else begin
        grp_fu_139_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_fu_143_p0 = reg_200;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_143_p0 = tmp_1_reg_402;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_143_p0 = m_float_fu_264_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_143_p0 = tmp_reg_397;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_143_p0 = k_float_fu_231_p1;
    end else begin
        grp_fu_143_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_fu_143_p1 = exp_float_reg_463;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_143_p1 = y2_float_reg_422;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_143_p1 = y2_float_fu_259_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_143_p1 = y1_float_reg_355;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_143_p1 = x_float_fu_218_p1;
    end else begin
        grp_fu_143_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_147_p0 = reg_194;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_147_p0 = w_float_fu_268_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_147_p0 = tmp_2_reg_407;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_147_p0 = l_float_fu_235_p1;
    end else begin
        grp_fu_147_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_147_p1 = y2_float_reg_422;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_147_p1 = y2_float_fu_259_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_147_p1 = y1_float_reg_355;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_147_p1 = y1_float_fu_226_p1;
    end else begin
        grp_fu_147_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign c_int = reg_182;

assign grp_fu_151_p0 = p_int_read_reg_311;

assign grp_fu_155_p0 = q_int_read_reg_306;

assign grp_fu_159_p0 = r_int_read_reg_301;

assign grp_fu_163_p0 = u_int_read_reg_291;

assign grp_fu_167_p0 = v_int_read_reg_286;

assign grp_fu_167_p1 = y1_int_read_reg_336;

assign k_float_fu_231_p1 = k_int_read_reg_326;

assign l_float_fu_235_p1 = l_int_read_reg_321;

assign m_float_fu_264_p1 = m_int_read_reg_316;

assign s_float_fu_272_p1 = s_int_read_reg_296;

assign w_float_fu_268_p1 = w_int_read_reg_281;

assign x_float_fu_218_p1 = x_int_read_reg_341;

assign y1_float_fu_226_p1 = y1_int_read_reg_336;

assign y2_float_fu_259_p1 = y2_int_read_reg_331;

endmodule //pro_int_trans
